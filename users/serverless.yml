# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: kunknown
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: users
# "service" is the name of this project. This will also be added to your AWS resource names.
service: users

stages:
  default:
    params:
      tableName: "${env:AWS_USERS_TABLE, 'users'}"

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs20.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: 
              - UsersTable
              - Arn
        - Effect: Allow
          Action:
            - apigateway:DELETE
            - apigateway:PUT
            - apigateway:POST
            - apigateway:GET
          Resource: "*"

  environment:
    AWS_USERS_TABLE: ${env:AWS_USERS_TABLE, 'users'}

functions:
  api:
    handler: handler.handler
    events:
      - httpApi:
          path: /users/{userId}
          method: get
      - httpApi:
          path: /users
          method: post
      - httpApi:
          path: /users/{userId}
          method: put
      - httpApi:
          path: /users/{userId}
          method: delete

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${env:AWS_USERS_TABLE, 'users'}
